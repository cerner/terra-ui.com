(window.webpackJsonp=window.webpackJsonp||[]).push([[435],{2953:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return a}));n(0);var r=n(331);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p={};function a(e){var t=e.components,n=l(e,["components"]);return Object(r.mdx)("wrapper",o({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.mdx)("h1",{id:"logger"},"Logger"),Object(r.mdx)("p",null,Object(r.mdx)("inlineCode",{parentName:"p"},"terra-cli")," provides a logger for use when creating cli tools. It is built on top of the ",Object(r.mdx)("a",{parentName:"p",href:"https://github.com/npm/npmlog"},"npm logger")," and supports all log levels that the npm logger supports. It automatically provides a ",Object(r.mdx)("inlineCode",{parentName:"p"},"terra")," heading to group terra cli commands in one namespace and a ",Object(r.mdx)("inlineCode",{parentName:"p"},"prefix")," prop to group all logs from a given file together."),Object(r.mdx)("h2",{id:"example"},"Example"),Object(r.mdx)("p",null,"The following will log at the info level."),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre"},"const { Logger } = require('@cerner/terra-cli');\n\nconst logger = new Logger({ prefix: '[test-logger]' });\n\nlogger.info('Logging something at the info level');\n")))}a.isMDXComponent=!0}}]);