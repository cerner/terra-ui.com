(window.webpackJsonp=window.webpackJsonp||[]).push([[420],{1144:function(e,l,n){"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.default=void 0;var t=[{key:"unique-0",toggleText:"Toggle Power Row 0",discloseText:"Power Row 0 - Details",primaryIndex:1,cells:[{key:"unique-0-0",title:"Dave Smith"},{key:"unique-0-1",title:"123 Adams Drive"},{key:"unique-0-2",title:"123-456-7890"},{key:"unique-0-3",title:"dave.smith@gmail.com"}]},{key:"unique-1",toggleText:"Toggle Power Row 1",discloseText:"Power Row 1 - Details",primaryIndex:1,cells:[{key:"unique-1-0",title:"Michael Smith"},{key:"unique-1-1",title:"345 Raymond Road"},{key:"unique-1-2",title:"111-222-3333"},{key:"unique-1-3",title:"michael.smith@gmail.com"}]},{key:"unique-2",toggleText:"Toggle Power Row 2",discloseText:"Power Row 2 - Details",primaryIndex:1,cells:[{key:"unique-2-0",title:"Jack Smith"},{key:"unique-2-1",title:"567 Drive Street"},{key:"unique-2-2",title:"222-333-4444"},{key:"unique-2-3",title:"jack.smith@gmail.com"}]},{key:"unique-3",toggleText:"Toggle Power Row 3",discloseText:"Power Row 3 - Details",primaryIndex:1,cells:[{key:"unique-3-0",title:"Tom Smith"},{key:"unique-3-1",title:"789 Bay Road"},{key:"unique-3-2",title:"555-666-7777"},{key:"unique-3-3",title:"tom.smith@gmail.com"}]},{key:"unique-4",toggleText:"Toggle Power Row 4",discloseText:"Power Row 4 - Details",primaryIndex:1,cells:[{key:"unique-4-0",title:"Paul Smith"},{key:"unique-4-1",title:"123 Adams Drive"},{key:"unique-4-2",title:"777-888-9999"},{key:"unique-4-3",title:"paul.smith@gmail.com"}]}];l.default=t},2779:function(e,l,n){"use strict";Object.defineProperty(l,"__esModule",{value:!0}),l.default=void 0;var t=c(n(0)),a=c(n(988)),r=c(n(1144));function c(e){return e&&e.__esModule?e:{default:e}}var i=function(){return t.default.createElement(a.default,{summaryId:"example-scalar-table",summary:"This table shows an implementation of scalar width table columns.",numberOfColumns:4,cellPaddingStyle:"standard",columnWidths:[{scalar:2},{scalar:1},{scalar:3},{scalar:4}],dividerStyle:"horizontal",headerData:{cells:[{key:"cell-0",id:"unique-cell-0",children:"Scalar 2"},{key:"cell-1",id:"unique-cell-1",children:"Scalar 1"},{key:"cell-2",id:"unique-cell-2",children:"Scalar 3"},{key:"cell-3",id:"unique-cell-3",children:"Scalar 4"}]},bodyData:[{rows:(e=r.default,e.map((function(e){return{key:(l=e).key,cells:(n=l.cells,n.map((function(e){return function(e){return{key:e.key,children:e.title}}(e)})))};var l,n})))}]});var e};l.default=i},3142:function(e,l,n){"use strict";n.r(l),n.d(l,"default",(function(){return f}));var t=n(0),a=n.n(t),r=n(331),c=n(2779),i=n.n(c);function o(){return(o=Object.assign||function(e){for(var l=1;l<arguments.length;l++){var n=arguments[l];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}function u(e,l){if(null==e)return{};var n,t,a=function(e,l){if(null==e)return{};var n,t,a={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],l.indexOf(n)>=0||(a[n]=e[n]);return a}(e,l);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],l.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s={};function d(e){var l=e.components,n=u(e,["components"]);return Object(r.mdx)("wrapper",o({},s,n,{components:l,mdxType:"MDXLayout"}),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport Table from 'terra-table';\nimport mockData from './mock-data/mock-select';\n\nconst createCell = cell => ({ key: cell.key, children: cell.title });\n\nconst createCellsForRow = cells => cells.map(cell => createCell(cell));\n\nconst createRow = rowData => (\n  {\n    key: rowData.key,\n    cells: createCellsForRow(rowData.cells),\n  }\n);\n\nconst createRows = data => data.map(childItem => createRow(childItem));\n\nconst ScalarWidthTable = () => (\n  <Table\n    summaryId=\"example-scalar-table\"\n    summary=\"This table shows an implementation of scalar width table columns.\"\n    numberOfColumns={4}\n    cellPaddingStyle=\"standard\"\n    columnWidths={[\n      { scalar: 2 },\n      { scalar: 1 },\n      { scalar: 3 },\n      { scalar: 4 },\n    ]}\n    dividerStyle=\"horizontal\"\n    headerData={{\n      cells: [\n        { key: 'cell-0', id: 'unique-cell-0', children: 'Scalar 2' },\n        { key: 'cell-1', id: 'unique-cell-1', children: 'Scalar 1' },\n        { key: 'cell-2', id: 'unique-cell-2', children: 'Scalar 3' },\n        { key: 'cell-3', id: 'unique-cell-3', children: 'Scalar 4' },\n      ],\n    }}\n    bodyData={[{\n      rows: createRows(mockData),\n    }]}\n  />\n);\n\nexport default ScalarWidthTable;\n\n")))}d.isMDXComponent=!0;var m=n(966),y=n.n(m),p=function(e){var l=e.title,n=e.description,t=e.isExpanded;return a.a.createElement(y.a,{title:l||"Scalar Width Table",description:n,example:a.a.createElement(i.a,null),exampleSrc:a.a.createElement(d,null),isExpanded:t})};function h(){return(h=Object.assign||function(e){for(var l=1;l<arguments.length;l++){var n=arguments[l];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}function b(e,l){if(null==e)return{};var n,t,a=function(e,l){if(null==e)return{};var n,t,a={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],l.indexOf(n)>=0||(a[n]=e[n]);return a}(e,l);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],l.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var w={};function f(e){var l=e.components,n=b(e,["components"]);return Object(r.mdx)("wrapper",h({},w,n,{components:l,mdxType:"MDXLayout"}),Object(r.mdx)("h1",{id:"terra-table---scalar-width-columns"},"Terra Table - Scalar Width Columns"),Object(r.mdx)("h2",{id:"create-row-and-cell-generation-functions"},"Create Row and Cell Generation Functions"),Object(r.mdx)("p",null,"First we declare our method of creating our rows."),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-diff"},"+ const createRow = rowData => (\n+   {\n+     key: rowData.key,\n+     cells: createCellsForRow(rowData.cells),\n+   }\n+ );\n\n+ const createRows = data => data.map(childItem => createRow(childItem));\n")),Object(r.mdx)("p",null,"Followed by unpacking our cell data into those rows."),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-diff"},"+ const createCell = cell => ({ key: cell.key, children: cell.title });\n\n+ const createCellsForRow = cells => cells.map(cell => createCell(cell));\n")),Object(r.mdx)("p",null,"And then we define the functional component returning our table."),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-diff"},"+ const ScalarWidthTable = () => (\n+   <Table\n+     summaryId=\"example-scalar-table\"\n+     summary=\"This table shows an implementation of scalar width table columns.\"\n+     numberOfColumns={4}\n+     cellPaddingStyle=\"standard\"\n+     headerData={{\n+       cells: [\n+         { key: 'cell-0', id: `unique-cell-0`, children: 'Scalar 2' },\n+         { key: 'cell-1', id: `unique-cell-1`, children: 'Scalar 1' },\n+         { key: 'cell-2', id: `unique-cell-2`, children: 'Scalar 3' },\n+         { key: 'cell-3', id: `unique-cell-3`, children: 'Scalar 4' },\n+       ],\n+     }}\n+     bodyData={[{\n+       rows: createRows(mockData),\n+     }]}\n+   />\n+ );\n")),Object(r.mdx)("p",null,"Then in order to adjust our columns, we set the ",Object(r.mdx)("inlineCode",{parentName:"p"},"columnWidths")," prop with your appropriate index based width values."),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-diff"},"const ScalarWidthTable = () => (\n  <Table\n    summaryId=\"example-scalar-table\"\n    summary=\"This table shows an implementation of scalar width table columns.\"\n    numberOfColumns={3}\n    cellPaddingStyle=\"standard\"\n+   columnWidths={[\n+     { scalar: 2 },\n+     { scalar: 1 },\n+     { scalar: 3 },\n+     { scalar: 4 },\n+   ]}\n    headerData={{\n      cells: [\n        { key: 'cell-0', id: `unique-cell-0`, children: 'Scalar 2' },\n        { key: 'cell-1', id: `unique-cell-1`, children: 'Scalar 1' },\n        { key: 'cell-2', id: `unique-cell-2`, children: 'Scalar 3' },\n        { key: 'cell-3', id: `unique-cell-3`, children: 'Scalar 4' },\n      ],\n    }}\n    bodyData={[{\n      rows: createRows(mockData),\n    }]}\n  />\n);\n")),Object(r.mdx)("p",null,"Using these steps we get the following example:"),Object(r.mdx)(p,{mdxType:"ScalarWidthTable"}))}f.isMDXComponent=!0}}]);