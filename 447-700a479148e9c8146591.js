(window.webpackJsonp=window.webpackJsonp||[]).push([[447],{2856:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return p}));n(0);var a=n(331);function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var r={};function p(e){var t=e.components,n=o(e,["components"]);return Object(a.mdx)("wrapper",i({},r,n,{components:t,mdxType:"MDXLayout"}),Object(a.mdx)("h1",{id:"how-to-manage-unsaved-changes"},"How To Manage Unsaved Changes"),Object(a.mdx)("p",null,"A typical application allows its users to navigate between different components to complete different workflows. However, sometimes the user has not completed their current work before attempting to navigate elsewhere in the application. In these cases, it makes sense to prevent that navigation until the user explicitly accepts that they are leaving the current workflow and may lose unsaved changes."),Object(a.mdx)("p",null,"Components that want to communicate the presence of their unsaved state to the framework can do so by rendering a ",Object(a.mdx)("a",{parentName:"p",href:"/terra-ui/application/terra-application/components/navigation-prompt"},"NavigationPrompt")," component. When mounted, the NavigationPrompt will register itself with any and all ",Object(a.mdx)("a",{parentName:"p",href:"/terra-ui/application/terra-application/components/navigation-prompt-checkpoint"},"NavigationPromptCheckpoints")," that are ancestors to it."),Object(a.mdx)("pre",null,Object(a.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React, { useState } from 'react';\nimport NavigationPrompt from 'terra-application/lib/navigation-prompt';\n\nconst ExampleComponent = () => {\n  const [hasPendingState, setHasPendingState] = useState(false);\n\n  return (\n    <div>\n      <p>This component toggles between having and not having pending state.</p>\n      <p>\n        <button type=\"button\" onClick={() => { setHasPendingState(!hasPendingState); }}>\n          {hasPendingState ? 'Clear Pending State' : 'Set Pending State'}\n        </button>\n      </p>\n      {hasPendingState ? <NavigationPrompt description=\"ExampleComponent\" /> : undefined}\n    </div>\n  );\n};\n\nexport default ExampleComponent;\n")),Object(a.mdx)("p",null,"Within ",Object(a.mdx)("inlineCode",{parentName:"p"},"terra-application"),", the following components respond to the presence of NavigationPrompts:"),Object(a.mdx)("ul",null,Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("a",{parentName:"li",href:"/terra-ui/application/terra-application/components/application-base"},"ApplicationBase")," - The user will be prompted to accept or reject window unload events if NavigationPrompts have been renedered within the ApplicationBase's children."),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("a",{parentName:"li",href:"/terra-ui/application/terra-application/components/modal-manager"},"ModalManager"),"/",Object(a.mdx)("a",{parentName:"li",href:"/terra-ui/application/terra-application/components/slide-panel-manager"},"SlidePanelManager")," - The user will be prompted to accept or reject disclosure dismissal if NavigationPrompts have been rendered within the disclosed component."),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("a",{parentName:"li",href:"/terra-ui/application/terra-application/components/application-navigation"},"ApplicationNavigation")," - The user will be prompted to accept or reject primary navigation and Logout selections if NavigationPrompts have been rendered within the ApplicationNavigation's children.")),Object(a.mdx)("p",null,"While these are the provided integrations, any component that navigates between stateful components can implement a ",Object(a.mdx)("a",{parentName:"p",href:"/terra-ui/application/terra-application/components/navigation-prompt-checkpoint"},"NavigationPromptCheckpoint")," to utilize the same registration and prompting logic."))}p.isMDXComponent=!0}}]);