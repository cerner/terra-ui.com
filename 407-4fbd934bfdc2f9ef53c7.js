(window.webpackJsonp=window.webpackJsonp||[]).push([[407],{2026:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l,a=(l=n(0))&&l.__esModule?l:{default:l},r=n(978);t.default=function(){return a.default.createElement(r.ResultNameHeaderCell,{resultName:"Blood Pressure",unit:"mmHg"})}},2027:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=o(n(0)),a=n(978),r=o(n(4)),m=o(n(993));function o(e){return e&&e.__esModule?e:{default:e}}var c=r.default.bind(m.default),s=function(){return l.default.createElement("div",{className:c("mock-flowsheet-firstcolumn")},l.default.createElement("div",{className:c("mock-flowsheet-firstcolumn-cell")},l.default.createElement(a.ResultNameHeaderCell,{resultName:"Temp",unit:"degC"})),l.default.createElement("div",{className:c(["mock-flowsheet-firstcolumn-cell","zebra"])},l.default.createElement(a.ResultNameHeaderCell,{resultName:"HR",unit:"bpm"})),l.default.createElement("div",{className:c("mock-flowsheet-firstcolumn-cell")},l.default.createElement(a.ResultNameHeaderCell,{resultName:"BP",unit:"mmHg"})),l.default.createElement("div",{className:c(["mock-flowsheet-firstcolumn-cell","zebra"])},l.default.createElement(a.ResultNameHeaderCell,{resultName:"Mean Arterial Pressure, Cuff",unit:"mmHg",typeIndicator:"calculated"})),l.default.createElement("div",{className:c("mock-flowsheet-firstcolumn-cell")},l.default.createElement(a.ResultNameHeaderCell,{resultName:"Respiratory Rate",unit:"br/min"})),l.default.createElement("div",{className:c(["mock-flowsheet-firstcolumn-cell","zebra"])},l.default.createElement(a.ResultNameHeaderCell,{resultName:"SpO2",unit:"%"})),l.default.createElement("div",{className:c("mock-flowsheet-firstcolumn-cell")},l.default.createElement(a.ResultNameHeaderCell,{resultName:"Height/Length Dosing",unit:"cm"})),l.default.createElement("div",{className:c(["mock-flowsheet-firstcolumn-cell","zebra"])},l.default.createElement(a.ResultNameHeaderCell,{resultName:"Height/Length Measured",unit:"cm"})),l.default.createElement("div",{className:c("mock-flowsheet-firstcolumn-cell")},l.default.createElement(a.ResultNameHeaderCell,{resultName:"Weight Dosing",unit:"kg"})),l.default.createElement("div",{className:c(["mock-flowsheet-firstcolumn-cell","zebra"])},l.default.createElement(a.ResultNameHeaderCell,{resultName:"Weight Measured",unit:"kg"})))};t.default=s},3082:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return P}));var l=n(0),a=n.n(l),r=n(331),m=n(1195),o=n(2026),c=n.n(o);function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e}).apply(this,arguments)}function u(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},r=Object.keys(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i={};function d(e){var t=e.components,n=u(e,["components"]);return Object(r.mdx)("wrapper",s({},i,n,{components:t,mdxType:"MDXLayout"}),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { ResultNameHeaderCell } from 'terra-clinical-result/lib/index';\n\nexport default () => <ResultNameHeaderCell resultName=\"Blood Pressure\" unit=\"mmHg\" />;\n\n")))}d.isMDXComponent=!0;var p=n(966),f=n.n(p),b=function(e){var t=e.title,n=e.description,l=e.isExpanded;return a.a.createElement(f.a,{title:t||"Result Name Header Cell",description:n,example:a.a.createElement(c.a,null),exampleSrc:a.a.createElement(d,null),isExpanded:l})},x=n(2027),N=n.n(x);function O(){return(O=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e}).apply(this,arguments)}function j(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},r=Object.keys(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var v={};function h(e){var t=e.components,n=j(e,["components"]);return Object(r.mdx)("wrapper",O({},v,n,{components:t,mdxType:"MDXLayout"}),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-jsx"},'import React from \'react\';\nimport { ResultNameHeaderCell } from \'terra-clinical-result/lib\';\nimport classNames from \'classnames/bind\';\nimport styles from \'../Examples.module.scss\';\n\nconst cx = classNames.bind(styles);\n\nconst ResultNameColumnFlowsheetExample = () => (\n  <div className={cx(\'mock-flowsheet-firstcolumn\')}>\n    <div className={cx(\'mock-flowsheet-firstcolumn-cell\')}>\n      <ResultNameHeaderCell resultName="Temp" unit="degC" />\n    </div>\n    <div className={cx([\'mock-flowsheet-firstcolumn-cell\', \'zebra\'])}>\n      <ResultNameHeaderCell resultName="HR" unit="bpm" />\n    </div>\n    <div className={cx(\'mock-flowsheet-firstcolumn-cell\')}>\n      <ResultNameHeaderCell resultName="BP" unit="mmHg" />\n    </div>\n    <div className={cx([\'mock-flowsheet-firstcolumn-cell\', \'zebra\'])}>\n      <ResultNameHeaderCell resultName="Mean Arterial Pressure, Cuff" unit="mmHg" typeIndicator="calculated" />\n    </div>\n    <div className={cx(\'mock-flowsheet-firstcolumn-cell\')}>\n      <ResultNameHeaderCell resultName="Respiratory Rate" unit="br/min" />\n    </div>\n    <div className={cx([\'mock-flowsheet-firstcolumn-cell\', \'zebra\'])}>\n      <ResultNameHeaderCell resultName="SpO2" unit="%" />\n    </div>\n    <div className={cx(\'mock-flowsheet-firstcolumn-cell\')}>\n      <ResultNameHeaderCell resultName="Height/Length Dosing" unit="cm" />\n    </div>\n    <div className={cx([\'mock-flowsheet-firstcolumn-cell\', \'zebra\'])}>\n      <ResultNameHeaderCell resultName="Height/Length Measured" unit="cm" />\n    </div>\n    <div className={cx(\'mock-flowsheet-firstcolumn-cell\')}>\n      <ResultNameHeaderCell resultName="Weight Dosing" unit="kg" />\n    </div>\n    <div className={cx([\'mock-flowsheet-firstcolumn-cell\', \'zebra\'])}>\n      <ResultNameHeaderCell resultName="Weight Measured" unit="kg" />\n    </div>\n  </div>\n);\n\nexport default ResultNameColumnFlowsheetExample;\n\n')))}h.isMDXComponent=!0;var y=n(994),g=function(e){var t=e.title,n=e.description,l=e.isExpanded;return a.a.createElement(f.a,{title:t||"Result Name Header Flowsheet Example",description:n,example:a.a.createElement(N.a,null),exampleCssSrc:a.a.createElement(y.a,null),exampleSrc:a.a.createElement(h,null),isExpanded:l})},w=n(969),C=n.n(w);function R(){return(R=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e}).apply(this,arguments)}function H(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},r=Object.keys(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var E=function(){return Object(r.mdx)(C.a,{rows:[{name:"resultName",type:function(){var e={};function t(t){var n=t.components,l=H(t,["components"]);return Object(r.mdx)("wrapper",R({},e,l,{components:n,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,"string"))}return t.isMDXComponent=!0,t({})},required:!0,defaultValue:"none",description:function(){var e={};function t(t){var n=t.components,l=H(t,["components"]);return Object(r.mdx)("wrapper",R({},e,l,{components:n,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,"Content to be displayed for the Result Name row label."))}return t.isMDXComponent=!0,t({})}},{name:"unit",type:function(){var e={};function t(t){var n=t.components,l=H(t,["components"]);return Object(r.mdx)("wrapper",R({},e,l,{components:n,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,"string"))}return t.isMDXComponent=!0,t({})},required:!1,defaultValue:"none",description:function(){var e={};function t(t){var n=t.components,l=H(t,["components"]);return Object(r.mdx)("wrapper",R({},e,l,{components:n,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,"Content to be displayed as the supporting Unit of Measure row label."))}return t.isMDXComponent=!0,t({})}},{name:"paddingStyle",type:function(){var e={};function t(t){var n=t.components,l=H(t,["components"]);return Object(r.mdx)("wrapper",R({},e,l,{components:n,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,"enum"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-json"},'[\n "none",\n "compact",\n "standard"\n]\n')))}return t.isMDXComponent=!0,t({})},required:!1,defaultValue:"'compact'",description:function(){var e={};function t(t){var n=t.components,l=H(t,["components"]);return Object(r.mdx)("wrapper",R({},e,l,{components:n,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,"The padding styling to apply to the Result Name row header cell.\nOne of ",Object(r.mdx)("inlineCode",{parentName:"p"},"'none'"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"'compact'"),", or ",Object(r.mdx)("inlineCode",{parentName:"p"},"'standard'"),"."))}return t.isMDXComponent=!0,t({})}},{name:"typeIndicator",type:function(){var e={};function t(t){var n=t.components,l=H(t,["components"]);return Object(r.mdx)("wrapper",R({},e,l,{components:n,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,"enum"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-json"},'[\n "none",\n "calculated"\n]\n')))}return t.isMDXComponent=!0,t({})},required:!1,defaultValue:"'none'",description:function(){var e={};function t(t){var n=t.components,l=H(t,["components"]);return Object(r.mdx)("wrapper",R({},e,l,{components:n,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,"Adds additional icon at beginning of row before the ResultName, indicating special information about results or cells.\nOne of ",Object(r.mdx)("inlineCode",{parentName:"p"},"'none'")," or ",Object(r.mdx)("inlineCode",{parentName:"p"},"'calculated'"),"."))}return t.isMDXComponent=!0,t({})}}]})};function M(){return(M=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e}).apply(this,arguments)}function k(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},r=Object.keys(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var D={};function P(e){var t=e.components,n=k(e,["components"]);return Object(r.mdx)("wrapper",M({},D,n,{components:t,mdxType:"MDXLayout"}),Object(r.mdx)(m.a,{mdxType:"Badge"}),Object(r.mdx)("h1",{id:"result-name-header-cell"},"Result Name Header Cell"),Object(r.mdx)("p",null,"Result-Name-Header-Cell is a component of terra-clinical-result that creates a standardized view for the Result Name and Unit of Measure in the first column (row header) for each row within a flowsheet."),Object(r.mdx)("h2",{id:"getting-started"},"Getting Started"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"Install with ",Object(r.mdx)("a",{parentName:"li",href:"https://www.npmjs.com/"},"npmjs"),":",Object(r.mdx)("ul",{parentName:"li"},Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"npm install terra-clinical-result"))))),Object(r.mdx)("h2",{id:"peer-dependencies"},"Peer Dependencies"),Object(r.mdx)("p",null,"This component requires the following peer dependencies be installed in your app for the component to properly function."),Object(r.mdx)("table",null,Object(r.mdx)("thead",{parentName:"table"},Object(r.mdx)("tr",{parentName:"thead"},Object(r.mdx)("th",{parentName:"tr",align:null},"Peer Dependency"),Object(r.mdx)("th",{parentName:"tr",align:null},"Version"))),Object(r.mdx)("tbody",{parentName:"table"},Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:null},"react"),Object(r.mdx)("td",{parentName:"tr",align:null},"^16.8.5")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:null},"react-dom"),Object(r.mdx)("td",{parentName:"tr",align:null},"^16.8.5")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",{parentName:"tr",align:null},"react-intl"),Object(r.mdx)("td",{parentName:"tr",align:null},"^2.8.0")))),Object(r.mdx)("h2",{id:"usage"},"Usage"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-jsx"},"import { ResultNameHeaderCell } from 'terra-clinical-result/lib/index';\n")),Object(r.mdx)("h2",{id:"examples"},"Examples"),Object(r.mdx)(b,{mdxType:"Default"}),Object(r.mdx)(g,{title:"Result Name Header Cells in Sample Flowsheet",mdxType:"FlowsheetExample"}),Object(r.mdx)("h2",{id:"result-name-header-cell-props"},"Result Name Header Cell Props"),Object(r.mdx)(E,{mdxType:"ResultNameHeaderProps"}))}P.isMDXComponent=!0}}]);