(window.webpackJsonp=window.webpackJsonp||[]).push([[457],{2982:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return c}));n(0);var o=n(331);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i={};function c(e){var t=e.components,n=r(e,["components"]);return Object(o.mdx)("wrapper",a({},i,n,{components:t,mdxType:"MDXLayout"}),Object(o.mdx)("h1",{id:"workspace-content-guide"},"Workspace Content Guide"),Object(o.mdx)("p",null,"Welcome to the Terra Workspace content guide. This guide will walk through the recommended approach for creating a component to be consumed and presented within a workspaces content area."),Object(o.mdx)("h2",{id:"summary"},"Summary"),Object(o.mdx)("p",null,"The overall construction of a workspace region is composed of a higher order ",Object(o.mdx)("inlineCode",{parentName:"p"},"Workspace")," component and child ",Object(o.mdx)("inlineCode",{parentName:"p"},"WorkspaceItem"),"'s. The ",Object(o.mdx)("inlineCode",{parentName:"p"},"WorkspaceItem")," is comprised of labels, identifiers, and a render function. Within the render function a ",Object(o.mdx)("inlineCode",{parentName:"p"},"WorkspaceContent")," component, or a component that wraps it, should be returned."),Object(o.mdx)("h2",{id:"getting-started"},"Getting Started"),Object(o.mdx)("p",null,"This guide will walk through structure, exports, and construction of a stand alone WorkspaceContent component. The example component is using the base component from terra-application to provide an API for interacting with the theme."),Object(o.mdx)("h2",{id:"workspace---higher-order"},"Workspace - Higher Order"),Object(o.mdx)("p",null,"An application and its associated page navigation will have the responsibility of constructing the workspace similar to the example below."),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { Workspace, WorkspaceItem } from 'terra-application/lib/workspace';\n\nconst MyWorkspace = () => {\n  return (\n    <Workspace\n      activeItemKey={activeKey}\n      onRequestActivate={(event, metaData) => setActiveKey(metaData.key)}\n    >\n      <WorkspaceItem\n        itemKey=\"item-1\"\n        label={intl.formatMessage({ id: MyContent1.labelTranslationId })}\n        metaData={{ key: 'item-1' }}\n        render={() => <MyContent1 />}\n      />\n      <WorkspaceItem\n        itemKey=\"item-2\"\n        label={intl.formatMessage({ id: MyContent2.labelTranslationId })}\n        metaData={{ key: 'item-2' }}\n        render={() => <MyContent2 />}\n      />\n      <WorkspaceItem\n        itemKey=\"item-3\"\n        label={intl.formatMessage({ id: MyContent3.labelTranslationId })}\n        metaData={{ key: 'item-3' }}\n        render={() => <MyContent3 />}\n      />\n    </Workspace>\n  );\n};\n\nexport default MyWorkspace;\n")),Object(o.mdx)("p",null,"We will be focusing on the content within the renders, in this example as shown by ",Object(o.mdx)("inlineCode",{parentName:"p"},"MyContent1")," and ",Object(o.mdx)("inlineCode",{parentName:"p"},"MyContent2"),"."),Object(o.mdx)("h2",{id:"workspace---content"},"Workspace - Content"),Object(o.mdx)("p",null,"While the WorkspaceContent component can be wrapped for composition/state management, there should be no structural/layout elements between the WorkspaceItem and the WorkspaceContent."),Object(o.mdx)("p",null,"A WorkspaceContent element can receive toolbar and children props."),Object(o.mdx)("p",null,"The toolbar will be injected into the layout by the WorkspaceContent itself. This pattern is similar to the terra-content-container and header/footer nodes."),Object(o.mdx)("p",null,"The child component will be placed within a scroll-able region."),Object(o.mdx)("p",null,Object(o.mdx)("em",{parentName:"p"},"Best Practice"),"\nAs applications will be pulling in multiple workspaces and multiple components to keep things isolated the best practice is to export a translation string identifier for the content's desired labeling. In this example, we are exporting a constant value as ",Object(o.mdx)("inlineCode",{parentName:"p"},"labelTranslationId"),"."),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { WorkspaceContent } from 'terra-application/lib/workspace';\n\nconst MyContent1 = () => {\n  return (\n    <WorkspaceContent\n      toolBar={<MyToolBar />}\n    >\n      <MyComponent />\n    </WorkspaceContent>\n  );\n};\n\nMyContent1.labelTranslationId = 'myModule.myContent1.label';\n\nexport default MyContent1;\n")),Object(o.mdx)("h2",{id:"workspace---managing-active-display"},"Workspace - Managing Active Display"),Object(o.mdx)("p",null,"WorkspaceContent components that are not the currently active display will remain mounted, but will be removed from the DOM. So any dependent logic or listeners that expect to be on the DOM need to be disabled or provided for when no longer on the DOM. In order to facilitate this, the WorkspaceContext provides an ",Object(o.mdx)("inlineCode",{parentName:"p"},"isActive")," value that will change when the WorkspaceContent component activates/deactivates."),Object(o.mdx)("p",null,"Below is an example using hooks to retrieve the ",Object(o.mdx)("inlineCode",{parentName:"p"},"isActive")," value."),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { WorkspaceContext } from 'terra-application/lib/workspace';\n\nconst MyContent2 = () => {\n  const { isActive } = React.useContext(WorkspaceContext);\n\n  React.useEffect(() => {\n    if (isActive) {\n      // add listeners\n\n      return () => {\n        // remove listeners\n      }\n    }\n  }, [isActive])\n\n  return (\n    <WorkspaceContent>\n      <MyComponent />\n    </WorkspaceContent>\n  );\n};\n\nexport default MyContent2;\n")),Object(o.mdx)("h2",{id:"workspace---notifications"},"Workspace - Notifications"),Object(o.mdx)("p",null,"Each WorkspaceContent component provides a region for rendering notification banners. To render a notification banner, the NotificationBanner provided by terra-application must be rendered as a child or descendent of the WorkspaceContent component."),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport NotificationBanner from 'terra-application/lib/notification-banner';\n\nconst MyContent3 = () => {\n  const [showAlertBanner, setShowAlertBanner] = useState(false);\n\n  // Note that any NotificationBanner components rendered by MyComponent would also be rendered within the\n  // WorkspaceContent notification region as WorkspaceContent is an ancestor to this MyComponent instance.\n\n  return (\n    <WorkspaceContent>\n      {showAlertBanner && (\n        <NotificationBanner\n          variant=\"hazard-high\"\n          id=\"my-component-notification-id\"\n          onRequestClose={() => setShowAlertBanner(false)}\n        />\n      )}\n      <MyComponent />\n    </WorkspaceContent>\n  );\n};\n\nexport default MyContent2;\n")),Object(o.mdx)("h2",{id:"workspace---activity-overlay"},"Workspace - Activity Overlay"),Object(o.mdx)("p",null,"The WorkspaceContent component can receive an ",Object(o.mdx)("inlineCode",{parentName:"p"},"activityOverlay")," prop that will be rendered over the component's other content."),Object(o.mdx)("p",null,"The provided ",Object(o.mdx)("inlineCode",{parentName:"p"},"WorkspaceContentActivityOverlay")," is the only supported component at this time."),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { WorkspaceContent, WorkspaceContentActivityOverlay } from 'terra-application/lib/workspace';\n\nconst MyContent4 = () => {\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    // toggle loading state here\n  })\n\n  return (\n    <WorkspaceContent\n      activityOverlay={isLoading ? <WorkspaceContentActivityOverlay variant=\"loading\" /> : undefined}\n    >\n      <MyComponent />\n    </WorkspaceContent>\n  );\n};\n\nexport default MyContent4;\n")),Object(o.mdx)("h2",{id:"workspace---status-overlay"},"Workspace - Status Overlay"),Object(o.mdx)("p",null,"The WorkspaceContent component can receive an ",Object(o.mdx)("inlineCode",{parentName:"p"},"statusOverlay")," prop that will be rendered over the component's other content."),Object(o.mdx)("p",null,"The provided ",Object(o.mdx)("inlineCode",{parentName:"p"},"WorkspaceContentStatusOverlay")," is the only supported component at this time."),Object(o.mdx)("p",null,"Note that this can be combined with and presented alongside the activity overlay if both props are provided. However, the activity overlay will render on top of the status overlay."),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { WorkspaceContent, WorkspaceContentStatusOverlay } from 'terra-application/lib/workspace';\n\nconst MyContent5 = () => {\n  const [hasNoResults, setHasNoResults] = React.useState(false);\n\n  React.useEffect(() => {\n    // toggle results state here\n  })\n\n  return (\n    <WorkspaceContent\n      statusOverlay={hasNoResults ? <WorkspaceContentStatusOverlay variant=\"no-matching-results\" /> : undefined}\n    >\n      <MyComponent />\n    </WorkspaceContent>\n  );\n};\n\nexport default MyContent5;\n")),Object(o.mdx)("h2",{id:"faq"},"FAQ"),Object(o.mdx)("h3",{id:"if-my-component-is-not-actively-displayed-will-my-state-be-preserved"},"If my component is not actively displayed will my state be preserved?"),Object(o.mdx)("p",null,"Yes! Content that is not actively displayed on the DOM remains mounted, so any state captured by your component is maintained."),Object(o.mdx)("h3",{id:"can-i-provide-my-own-scrolling-via-terra-scroll-or-terra-content-container"},"Can I provide my own scrolling via terra-scroll or terra-content-container?"),Object(o.mdx)("p",null,"No. The workspace provides the scroll-able region and the location to render fixed header elements. This region is provided and controlled in order to handle the various keyboard/accessibility concerns associated with the presentation."))}c.isMDXComponent=!0}}]);