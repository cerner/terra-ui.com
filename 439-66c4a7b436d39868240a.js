(window.webpackJsonp=window.webpackJsonp||[]).push([[439],{2971:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return o}));t(0);var r=t(331);function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c={};function o(e){var n=e.components,t=i(e,["components"]);return Object(r.mdx)("wrapper",a({},c,t,{components:n,mdxType:"MDXLayout"}),Object(r.mdx)("h1",{id:"terra-service"},"Terra Service"),Object(r.mdx)("p",null,"The Terra service integrates ",Object(r.mdx)("a",{parentName:"p",href:"https://github.com/dequelabs/axe-core"},"axe accessibility")," testing into the test environment. Invoking the axe engine will perform a static analysis of the current document and dom structure. The axe analysis runs accessibility checks against ",Object(r.mdx)("inlineCode",{parentName:"p"},"wcag2a"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"wcag2aa"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"wcag21aa"),", and ",Object(r.mdx)("inlineCode",{parentName:"p"},"section508")," standards."),Object(r.mdx)("h2",{id:"installation"},"Installation"),Object(r.mdx)("p",null,"The Terra service should be installed as a development dependency."),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev @cerner/terra-functional-testing\n")),Object(r.mdx)("h2",{id:"configuration"},"Configuration"),Object(r.mdx)("p",null,"To use the service it must be added to the services array in the ",Object(r.mdx)("inlineCode",{parentName:"p"},"wdio.conf.js")," file."),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nconst TerraService = require('@cerner/terra-functional-testing/lib/services/wdio-terra-service');\n\nexport.config = {\n    // ...\n    services: [\n        [TerraService, {\n            // Terra service options here\n            // ...\n        }]\n    ],\n    // ...\n};\n")),Object(r.mdx)("h2",{id:"options"},"Options"),Object(r.mdx)("h3",{id:"formfactor"},"formFactor"),Object(r.mdx)("p",null,"Tests can be executed in a specific form factor by setting the ",Object(r.mdx)("inlineCode",{parentName:"p"},"formFactor")," configuration option or the ",Object(r.mdx)("inlineCode",{parentName:"p"},"FORM_FACTOR")," environment variable . The form factors can be any of the following supported viewports: ",Object(r.mdx)("inlineCode",{parentName:"p"},"tiny"),"; ",Object(r.mdx)("inlineCode",{parentName:"p"},"small"),"; ",Object(r.mdx)("inlineCode",{parentName:"p"},"medium"),"; ",Object(r.mdx)("inlineCode",{parentName:"p"},"large"),"; ",Object(r.mdx)("inlineCode",{parentName:"p"},"huge"),"; ",Object(r.mdx)("inlineCode",{parentName:"p"},"enormous"),". In order for the tests to run in this form factor, it must be one that is already specified in the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Terra.describeViewport")," block. "),Object(r.mdx)("p",null,"Type: ",Object(r.mdx)("inlineCode",{parentName:"p"},"String")),Object(r.mdx)("p",null,"Required: ",Object(r.mdx)("inlineCode",{parentName:"p"},"false")),Object(r.mdx)("p",null,"Default: ",Object(r.mdx)("inlineCode",{parentName:"p"},"undefined")),Object(r.mdx)("p",null,"Examples:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-js"},'"FORM_FACTOR=huge npm run test:wdio"\n')),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nconst TerraService = require('@cerner/terra-functional-testing/lib/services/wdio-terra-service');\n\nexport.config = {\n    // ...\n    services: [\n        [TerraService, {\n          formFactor: 'huge',\n        }]\n    ],\n    // ...\n};\n")),Object(r.mdx)("h3",{id:"selector"},"selector"),Object(r.mdx)("p",null,"An optional selector can be configured in the ",Object(r.mdx)("inlineCode",{parentName:"p"},"serviceOptions")," option to specify the element to be captured in the screenshot. The default selector is ",Object(r.mdx)("inlineCode",{parentName:"p"},"data-terra-test-content"),". Accessibility testing ignores this option and always tests the entire document."),Object(r.mdx)("p",null,"Type: ",Object(r.mdx)("inlineCode",{parentName:"p"},"string")),Object(r.mdx)("p",null,"Required: ",Object(r.mdx)("inlineCode",{parentName:"p"},"false")),Object(r.mdx)("p",null,"Default: ",Object(r.mdx)("inlineCode",{parentName:"p"},"[data-terra-test-content] *:first-child")),Object(r.mdx)("p",null,"Example:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nexport.config = {\n    // ...\n    serviceOptions: {\n        selector: 'selector-name',\n    },\n    // ...\n};\n")),Object(r.mdx)("h3",{id:"theme"},"theme"),Object(r.mdx)("p",null,"An optional theme name that will be used to configure the testing environment. This option will flex the axe-core rules used during testing to account for the current theme."),Object(r.mdx)("p",null,"Type: ",Object(r.mdx)("inlineCode",{parentName:"p"},"string")),Object(r.mdx)("p",null,"Required: ",Object(r.mdx)("inlineCode",{parentName:"p"},"false")),Object(r.mdx)("p",null,"Default: ",Object(r.mdx)("inlineCode",{parentName:"p"},"terra-default-theme")),Object(r.mdx)("p",null,"Example:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nconst TerraService = require('@cerner/terra-functional-testing/lib/services/wdio-terra-service');\n\nexport.config = {\n    // ...\n    services: [\n        [TerraService, {\n          theme: 'terra-theme-name',\n        }]\n    ],\n    // ...\n};\n")))}o.isMDXComponent=!0}}]);