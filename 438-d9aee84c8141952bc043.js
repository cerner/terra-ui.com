(window.webpackJsonp=window.webpackJsonp||[]).push([[438],{2970:function(e,n,r){"use strict";r.r(n),r.d(n,"default",(function(){return l}));r(0);var t=r(331);function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var r=arguments[n];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])}return e}).apply(this,arguments)}function o(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c={};function l(e){var n=e.components,r=o(e,["components"]);return Object(t.mdx)("wrapper",i({},c,r,{components:n,mdxType:"MDXLayout"}),Object(t.mdx)("h1",{id:"selenium-docker-service"},"Selenium Docker Service"),Object(t.mdx)("p",null,"The selenium docker service initializes a docker swarm for running functional ",Object(t.mdx)("a",{parentName:"p",href:"https://webdriver.io/"},"WebDriverIO")," tests against a containerized ",Object(t.mdx)("a",{parentName:"p",href:"https://github.com/SeleniumHQ/docker-selenium"},"selenium docker")," environment."),Object(t.mdx)("p",null,"By default, the selenium grid will be deployed locally on the host machine running on port 4444. Google Chrome and Firefox browsers are available on the grid."),Object(t.mdx)("h2",{id:"installation"},"Installation"),Object(t.mdx)("p",null,"The selenium docker service should be installed as a development dependency."),Object(t.mdx)("pre",null,Object(t.mdx)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev @cerner/terra-functional-testing\n")),Object(t.mdx)("h2",{id:"configuration"},"Configuration"),Object(t.mdx)("p",null,"To use the service it must be added to the services array in the ",Object(t.mdx)("inlineCode",{parentName:"p"},"wdio.conf.js")," file."),Object(t.mdx)("pre",null,Object(t.mdx)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nconst SeleniumDockerService = require('@cerner/terra-functional-testing/lib/services/wdio-selenium-docker-service');\n\nexport.config = {\n    // ...\n    services: [\n        [SeleniumDockerService]\n    ],\n    // ...\n};\n")),Object(t.mdx)("h2",{id:"options"},"Options"),Object(t.mdx)("h3",{id:"seleniumversion"},"seleniumVersion"),Object(t.mdx)("p",null,"The docker selenium image version to run tests against."),Object(t.mdx)("p",null,"Type: ",Object(t.mdx)("inlineCode",{parentName:"p"},"string")),Object(t.mdx)("p",null,"Required: ",Object(t.mdx)("inlineCode",{parentName:"p"},"false")),Object(t.mdx)("p",null,"Default: ",Object(t.mdx)("inlineCode",{parentName:"p"},"3.14.0-helium")),Object(t.mdx)("p",null,"Example:"),Object(t.mdx)("pre",null,Object(t.mdx)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nconst SeleniumDockerService = require('@cerner/terra-functional-testing/lib/services/wdio-selenium-docker-service');\n\nexport.config = {\n    // ...\n    services: [[SeleniumDockerService]],\n    serviceOptions: {\n        seleniumVersion: '3.14.0-helium',\n    }\n    // ...\n};\n")))}l.isMDXComponent=!0}}]);