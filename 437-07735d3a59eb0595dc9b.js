(window.webpackJsonp=window.webpackJsonp||[]).push([[437],{2969:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return l}));t(0);var r=t(331);function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var a={};function l(e){var n=e.components,t=c(e,["components"]);return Object(r.mdx)("wrapper",i({},a,t,{components:n,mdxType:"MDXLayout"}),Object(r.mdx)("h1",{id:"asset-server-service"},"Asset Server Service"),Object(r.mdx)("p",null,"The asset server service initializes a server to serve compiled assets to the testing environment."),Object(r.mdx)("h2",{id:"installation"},"Installation"),Object(r.mdx)("p",null,"The asset server service should be installed as a development dependency."),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev @cerner/terra-functional-testing\n")),Object(r.mdx)("h2",{id:"configuration"},"Configuration"),Object(r.mdx)("p",null,"To use the service it must be added to the services array in the ",Object(r.mdx)("inlineCode",{parentName:"p"},"wdio.conf.js")," file."),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nconst AssetServerService = require('@cerner/terra-functional-testing/lib/services/wdio-asset-server-service');\n\nexport.config = {\n    // ...\n    services: [\n        [AssetServerService, {\n            // Asset server service options here.\n            // ...\n        }]\n    ],\n    // ...\n};\n")),Object(r.mdx)("h2",{id:"options"},"Options"),Object(r.mdx)("h3",{id:"webpackconfig"},"webpackConfig"),Object(r.mdx)("p",null,"A path to a webpack configuration file."),Object(r.mdx)("p",null,"Note: The ",Object(r.mdx)("inlineCode",{parentName:"p"},"site")," configuration option will take precedence over ",Object(r.mdx)("inlineCode",{parentName:"p"},"webpackConfig")," if both are provided."),Object(r.mdx)("p",null,"Type: ",Object(r.mdx)("inlineCode",{parentName:"p"},"string")),Object(r.mdx)("p",null,"Required: ",Object(r.mdx)("inlineCode",{parentName:"p"},"false")),Object(r.mdx)("p",null,"Default: The asset server service will check the current working directory for a ",Object(r.mdx)("inlineCode",{parentName:"p"},"webpack.config.js")," file."),Object(r.mdx)("p",null,"Example:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nconst AssetServerService = require('@cerner/terra-functional-testing/lib/services/wdio-asset-server-service');\n\nexport.config = {\n    // ...\n    services: [\n        [AssetServerService, {\n          webpackConfig: './path/webpack.config.js'\n        }]\n    ],\n    // ...\n};\n")),Object(r.mdx)("h3",{id:"locale"},"locale"),Object(r.mdx)("p",null,"Note: The locale will only be applied when providing a webpack configuration. The locale will not be used for ",Object(r.mdx)("inlineCode",{parentName:"p"},"site")," configuration."),Object(r.mdx)("p",null,"An optional locale that will be passed into the webpack configuration as an environment variable."),Object(r.mdx)("p",null,"Type: ",Object(r.mdx)("inlineCode",{parentName:"p"},"string")),Object(r.mdx)("p",null,"Required: ",Object(r.mdx)("inlineCode",{parentName:"p"},"false")),Object(r.mdx)("p",null,"Default: ",Object(r.mdx)("inlineCode",{parentName:"p"},"undefined")),Object(r.mdx)("p",null,"Example:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nconst AssetServerService = require('@cerner/terra-functional-testing/lib/services/wdio-asset-server-service');\n\nexport.config = {\n    // ...\n    services: [\n        [AssetServerService, {\n          locale: 'en-US',\n        }]\n    ],\n    // ...\n};\n")),Object(r.mdx)("h3",{id:"port"},"port"),Object(r.mdx)("p",null,"The port the service will be hosted on."),Object(r.mdx)("p",null,"Type: ",Object(r.mdx)("inlineCode",{parentName:"p"},"number")),Object(r.mdx)("p",null,"Required: ",Object(r.mdx)("inlineCode",{parentName:"p"},"false")),Object(r.mdx)("p",null,"Default: ",Object(r.mdx)("inlineCode",{parentName:"p"},"8080")),Object(r.mdx)("p",null,"Example:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nconst AssetServerService = require('@cerner/terra-functional-testing/lib/services/wdio-asset-server-service');\n\nexport.config = {\n    // ...\n    services: [\n        [AssetServerService, {\n          port: 8080,\n        }]\n    ],\n    // ...\n};\n")),Object(r.mdx)("h3",{id:"site"},"site"),Object(r.mdx)("p",null,"A relative path to a directory of static assets. If provided, an express server will be launched to serve the directory assets."),Object(r.mdx)("p",null,"Note: The ",Object(r.mdx)("inlineCode",{parentName:"p"},"site")," configuration option will take precedence over ",Object(r.mdx)("inlineCode",{parentName:"p"},"webpackConfig")," if both are provided."),Object(r.mdx)("p",null,"Type: ",Object(r.mdx)("inlineCode",{parentName:"p"},"string")),Object(r.mdx)("p",null,"Required: ",Object(r.mdx)("inlineCode",{parentName:"p"},"false")),Object(r.mdx)("p",null,"Default: ",Object(r.mdx)("inlineCode",{parentName:"p"},"undefined")),Object(r.mdx)("p",null,"Example:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nconst AssetServerService = require('@cerner/terra-functional-testing/lib/services/wdio-asset-server-service');\n\nexport.config = {\n    // ...\n    services: [\n        [AssetServerService, {\n          site: './build',\n        }]\n    ],\n    // ...\n};\n")),Object(r.mdx)("h3",{id:"theme"},"theme"),Object(r.mdx)("p",null,"Note: The theme will only be applied when providing a webpack configuration. The theme will not be used for ",Object(r.mdx)("inlineCode",{parentName:"p"},"site")," configuration."),Object(r.mdx)("p",null,"An optional theme that will be passed into the webpack configuration as an environment variable."),Object(r.mdx)("p",null,"Type: ",Object(r.mdx)("inlineCode",{parentName:"p"},"string")),Object(r.mdx)("p",null,"Required: ",Object(r.mdx)("inlineCode",{parentName:"p"},"false")),Object(r.mdx)("p",null,"Default: ",Object(r.mdx)("inlineCode",{parentName:"p"},"terra-default-theme")),Object(r.mdx)("p",null,"Example:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",{parentName:"pre",className:"language-js"},"// wdio.conf.js\nconst AssetServerService = require('@cerner/terra-functional-testing/lib/services/wdio-asset-server-service');\n\nexport.config = {\n    // ...\n    services: [\n        [AssetServerService, {\n          theme: 'terra-theme-name',\n        }]\n    ],\n    // ...\n};\n")))}l.isMDXComponent=!0}}]);